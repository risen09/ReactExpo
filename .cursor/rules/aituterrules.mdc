---
description: It describes how the database architecture, description, frontend and backend parts of the application are arranged
globs: 
alwaysApply: false
---

# Your rule content
General Architecture

Key principles:
1. Automation: All user interactions take place through AI.
2. Personalization: Each student gets a unique learning experience based on an analysis of their cognitive characteristics.
3. Scalability: The platform can serve millions of users simultaneously.

2. Client Paths (Features)

 Block 1: Getting Started
1. Registration and authorization:
- Registration via email/Google/ social media.
   - Password recovery via email.
   - Multi-factor authentication (optional).

2. Identification of the personality type:
   - Passing a test to analyze cognitive features (visual, auditory, kinesthetic).
   - Saving data in the user's profile.

3. Subject selection:
- The student chooses a subject (mathematics, physics, computer science).
   - AI offers an initial training plan.

Block 2: Training
4. Personalized Lesson Generation:
- AI creates lessons based on personality type (for example, more graphics for visuals).
   - Using LLM to generate text explanations and examples.

5. Interactive lessons:
- Step-by-step explanation of the material.
   - The ability to request additional clarification via a chatbot.

6. Practical tasks:
- AI generates tasks corresponding to the student's current level.
   - Automatic verification of responses via LLM.

7. Feedback:
   - Error analysis via AI.
   - Detailed explanation of incorrect answers.

8. Timer and Progress:
- Tracking task completion time.
   - Offering a more detailed explanation with a long lead time.

lock 3: Analytics and Progress
9. Progress analysis:
- Visualization of progress (graphs, diagrams).
   - Predicting success through LSTM.

10. Learning Recommendations:
- AI suggests topics for repetition or in-depth study.
    - Generation of a new curriculum based on progress analysis.

11. Exam preparation:
- Generation of tests according to the OGE/USE format.
    - Analyzing the student's weaknesses and proposing a training plan.

 Block 4: Interactive Elements
12. Chatbot for help:
    - AI answers students' questions in real time.
    - The ability to request an explanation of complex topics.

13. Video tutorials and animations:
    - AI generates short video tutorials and animations for visual explanation.

14. Interactive examples:
    - AI creates interactive tasks with dynamic elements (for example, dragging objects).

 Block 5: Gamification and Motivation
15. Awards and achievements:
    - A system of points for completing tasks.
    - Levels and badges (for example, "Master of Mathematics").

16. Leaderboards:
    - Student ratings within the platform.
    - A competitive element for motivation.

17. Reminder system:
- Notifications of new lessons or achievements.
    - Recommendations to continue the training.

 Block 6: Personalization and Settings
18. Profile Setup:
    - Edit name, photo, notification settings.
    - Selection of interface design themes.

19. Customization of content:
- The ability to choose the style of explanations (more detailed, brief, with examples).
    - Setting the difficulty level of tasks.

20. Integration with social networks:
- The ability to share successes on social networks.
    - Invite friends through the referral program.

Queries to the mongodb database from the client side:
const API_BASE_URL = 'https://j0cl9aplcsh5.share.zrok.io';


// Авторизация
const login = async () => {
    try {
        const response = await fetch(`${API_BASE_URL}/api/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Basic ' + btoa('admin:admin123')
            }
        });

        if (!response.ok) {
            const error = await response.text();
            throw new Error(`Login failed: ${error}`);
        }

        return await response.json();
    } catch (error) {
        console.error('Login error:', error);
        throw error;
    }
};

// Получение записей из коллекции
const fetchRecords = async (token, collection) => {
    try {
        const response = await fetch(`${API_BASE_URL}/api/${collection}`, {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        if (!response.ok) {
            const error = await response.text();
            throw new Error(`API request failed: ${error}`);
        }

        return await response.json();
    } catch (error) {
        console.error('Fetch error:', error);
        throw error;
    }
};

// Создание записи в коллекции
const createRecord = async (token, collection, recordData) => {
    try {
        const response = await fetch(`${API_BASE_URL}/api/${collection}`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(recordData)
        });

        if (!response.ok) {
            const error = await response.text();
            throw new Error(`Ошибка создания: ${error}`);
        }

        return await response.json();
    } catch (error) {
        console.error('Create error:', error);
        throw error;
    }
};

(async () => {
    try {
        // 1. Аутентификация
        console.log('1. Authenticating...');
        const { token } = await login();
        console.log('2. Token received:', token.slice(0, 15) + '...');

        await delay(500);

        // 2. Создание пользователя
        console.log('3. Creating user...');
        const newUser = await createRecord(token, 'users', {
            email: 'user@example.com',
            password_hash: 'hashed_password',
            registration_date: new Date(),
            auth_type: 'email',
            mfa_enabled: false,
            cognitive_profile: {
                learning_style: 'visual',
                test_results: [85, 90, 78],
                preferences: {
                    explanation_style: 'detailed',
                    difficulty_level: 'intermediate'
                }
            },
            selected_subjects: ['math', 'physics'],
            notifications: {
                email_enabled: true,
                app_enabled: true,
                reminders: {
                    daily_summary: true,
                    new_lessons: true
                }
            },
            achievements: []
        });
        console.log('4. Created user:', newUser);

        await delay(500);

        // 3. Создание урока
        console.log('5. Creating lesson...');
        const newLesson = await createRecord(token, 'lessons', {
            subject: 'math',
            title: 'Introduction to Algebra',
            content: {
                text: 'This lesson covers the basics of algebra...',
                visual_aid: 'https://example.com/image.png',
                audio: 'https://example.com/audio.mp3',
                interactive: {
                    type: 'quiz',
                    data: { question: 'What is 2+2?', options: ['3', '4', '5'] }
                }
            },
            difficulty: 3,
            prerequisites: [],
            ai_generated: true,
            created_at: new Date()
        });
        console.log('6. Created lesson:', newLesson);

        await delay(500);

        // 4. Создание прогресса
        console.log('7. Creating progress...');
        const newProgress = await createRecord(token, 'progress', {
            user_id: newUser._id,
            subject: 'math',
            completed_lessons: [],
            current_lesson: newLesson._id,
            performance: {
                average_score: 0,
                time_spent: 0,
                last_activity: new Date()
            },
            predictions: {
                success_probability: 0.8,
                recommended_topics: ['algebra', 'geometry']
            }
        });
        console.log('8. Created progress:', newProgress);

        await delay(500);

        // 5. Создание задания
        console.log('9. Creating assignment...');
        const newAssignment = await createRecord(token, 'assignments', {
            lesson_id: newLesson._id,
            type: 'practice',
            question: 'What is 2+2?',
            correct_answer: '4',
            options: ['3', '4', '5'],
            difficulty: 3,
            ai_generated: true
        });
        console.log('10. Created assignment:', newAssignment);

        await delay(500);

        // 6. Создание ответа
        console.log('11. Creating submission...');
        const newSubmission = await createRecord(token, 'submissions', {
            user_id: newUser._id,
            assignment_id: newAssignment._id,
            submitted_answer: '4',
            is_correct: true,
            score: 10,
            feedback: 'Correct answer!',
            submission_time: new Date()
        });
        console.log('12. Created submission:', newSubmission);

        await delay(500);

        // 7. Создание достижения
        console.log('13. Creating achievement...');
        const newAchievement = await createRecord(token, 'achievements', {
            title: 'Math Master',
            description: 'Solved 100 math problems',
            criteria: {
                type: 'task_count',
                value: 100
            },
            badge_image: 'https://example.com/badge.png',
            reward_points: 500
        });
        console.log('14. Created achievement:', newAchievement);

        await delay(500);

        // 8. Создание рейтинга
        console.log('15. Creating leaderboard entry...');
        const newLeaderboard = await createRecord(token, 'leaderboards', {
            user_id: newUser._id,
            subject: 'math',
            total_points: 500,
            weekly_rank: 1,
            monthly_rank: 1
        });
        console.log('16. Created leaderboard entry:', newLeaderboard);

        await delay(500);

        // 9. Создание рекомендации
        console.log('17. Creating recommendation...');
        const newRecommendation = await createRecord(token, 'recommendations', {
            user_id: newUser._id,
            recommended_lessons: [newLesson._id],
            suggested_topics: ['algebra', 'geometry'],
            generated_at: new Date(),
            priority: 'high'
        });
        console.log('18. Created recommendation:', newRecommendation);

        await delay(500);

        // 10. Создание записи в истории чата
        console.log('19. Creating chat history...');
        const newChatHistory = await createRecord(token, 'chatHistory', {
            user_id: newUser._id,
            messages: [
                {
                    role: 'user',
                    content: 'What is algebra?',
                    timestamp: new Date()
                },
                {
                    role: 'ai',
                    content: 'Algebra is a branch of mathematics...',
                    timestamp: new Date()
                }
            ]
        });
        console.log('20. Created chat history:', newChatHistory);

    } catch (error) {
        console.error('Final error:', error.message);
    }
})();


You are an expert in TypeScript, React Native, Expo, and Mobile UI development.

  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  - Follow Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  - Use strict mode in TypeScript for better type safety.

  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  - Use Prettier for consistent code formatting.

  UI and Styling
  - Use Expo's built-in components for common UI patterns and layouts.
  - Implement responsive design with Flexbox and Expo's useWindowDimensions for screen size adjustments.
  - Use styled-components or Tailwind CSS for component styling.
  - Implement dark mode support using Expo's useColorScheme.
  - Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
  - Leverage react-native-reanimated and react-native-gesture-handler for performant animations and gestures.

  Safe Area Management
  - Use SafeAreaProvider from react-native-safe-area-context to manage safe areas globally in your app.
  - Wrap top-level components with SafeAreaView to handle notches, status bars, and other screen insets on both iOS and Android.
  - Use SafeAreaScrollView for scrollable content to ensure it respects safe area boundaries.
  - Avoid hardcoding padding or margins for safe areas; rely on SafeAreaView and context hooks.

  Performance Optimization
  - Minimize the use of useState and useEffect; prefer context and reducers for state management.
  - Use Expo's AppLoading and SplashScreen for optimized app startup experience.
  - Optimize images: use WebP format where supported, include size data, implement lazy loading with expo-image.
  - Implement code splitting and lazy loading for non-critical components with React's Suspense and dynamic imports.
  - Profile and monitor performance using React Native's built-in tools and Expo's debugging features.
  - Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

  Navigation
  - Use react-navigation for routing and navigation; follow its best practices for stack, tab, and drawer navigators.
  - Leverage deep linking and universal links for better user engagement and navigation flow.
  - Use dynamic routes with expo-router for better navigation handling.

  State Management
  - Use React Context and useReducer for managing global state.
  - Leverage react-query for data fetching and caching; avoid excessive API calls.
  - For complex state management, consider using Zustand or Redux Toolkit.
  - Handle URL search parameters using libraries like expo-linking.

  Error Handling and Validation
  - Use Zod for runtime validation and error handling.
  - Implement proper error logging using Sentry or a similar service.
  - Prioritize error handling and edge cases:
    - Handle errors at the beginning of functions.
    - Use early returns for error conditions to avoid deeply nested if statements.
    - Avoid unnecessary else statements; use if-return pattern instead.
    - Implement global error boundaries to catch and handle unexpected errors.
  - Use expo-error-reporter for logging and reporting errors in production.

  Testing
  - Write unit tests using Jest and React Native Testing Library.
  - Implement integration tests for critical user flows using Detox.
  - Use Expo's testing tools for running tests in different environments.
  - Consider snapshot testing for components to ensure UI consistency.

  Security
  - Sanitize user inputs to prevent XSS attacks.
  - Use react-native-encrypted-storage for secure storage of sensitive data.
  - Ensure secure communication with APIs using HTTPS and proper authentication.
  - Use Expo's Security guidelines to protect your app: https://docs.expo.dev/guides/security/

  Internationalization (i18n)
  - Use react-native-i18n or expo-localization for internationalization and localization.
  - Support multiple languages and RTL layouts.
  - Ensure text scaling and font adjustments for accessibility.

  Key Conventions
  1. Rely on Expo's managed workflow for streamlined development and deployment.
  2. Prioritize Mobile Web Vitals (Load Time, Jank, and Responsiveness).
  3. Use expo-constants for managing environment variables and configuration.
  4. Use expo-permissions to handle device permissions gracefully.
  5. Implement expo-updates for over-the-air (OTA) updates.
  6. Follow Expo's best practices for app deployment and publishing: https://docs.expo.dev/distribution/introduction/
  7. Ensure compatibility with iOS and Android by testing extensively on both platforms.

  API Documentation
  - Use Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

  Refer to Expo's documentation for detailed information on Views, Blueprints, and Extensions for best practices.
    